local repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'
local player = game.Players.LocalPlayer
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Options = Library.Options
local Toggles = Library.Toggles
local ESP = loadstring(game:HttpGet("https://pastebin.com/raw/4FzxkWet"))()
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local RenderDistance = 1200
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local RenderStepped = RunService.RenderStepped

local Cache = {}
local TrinketType = loadstring(game:HttpGet("https://pastebin.com/raw/LEuPtDt9"))()

local ESPEnabled = false
-- Variables for Auto Pick Up
local AutoPickupEnabled = false
local PickupRadius = 10 -- Adjust the range as needed

-- Function to handle Auto Pick Up
local function AutoPickup()
    if not AutoPickupEnabled then return end

    for _, object in pairs(Workspace:GetChildren()) do
        if object:FindFirstChildWhichIsA("ClickDetector", true) and object:FindFirstChild("ID") then
            local clickDetector = object:FindFirstChildWhichIsA("ClickDetector", true)
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - object.Position).Magnitude

            if distance <= PickupRadius then
                fireclickdetector(clickDetector)
            end
        end
    end
end
local function NewDrawing(Type, Properties)
    local Drawing = Drawing.new(Type)
    for i, v in pairs(Properties) do
        Drawing[i] = v
    end
    return Drawing
end

local function NewESP(Object, Info)
    local ESP = {}

    ESP.Name = NewDrawing('Text', {
        Center = true,
        Font = 3, -- Monospace font for a unique style
        Outline = true,
        Size = 18,
        Color = Info.Rare and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(180, 180, 180),
        Transparency = 1,
        Text = Info.Name
    })

    Cache[Object] = { Info = Info, ESP = ESP }
end

local function RemoveESP(Object)
    if Cache[Object] then
        for _, v in pairs(Cache[Object].ESP) do
            v:Remove()
        end
        Cache[Object] = nil
    end
end

local function Update()
    if not ESPEnabled then
        for _, v in pairs(Cache) do
            for _, part in pairs(v.ESP) do
                part.Visible = false
            end
        end
        return
    end

    for i, v in pairs(Cache) do
        if not i or not i.Parent then
            RemoveESP(i)
            continue
        end

        local Pos, InView = Camera:WorldToViewportPoint(i.Position)

        if not InView or (Camera.CFrame.Position - i.Position).Magnitude > RenderDistance then
            for _, part in pairs(v.ESP) do
                part.Visible = false
            end
            continue
        end

        -- Update ESP visuals
        v.ESP.Name.Position = Vector2.new(Pos.X, Pos.Y - 20)
        v.ESP.Name.Visible = true
    end
end

for _, v in pairs(Workspace:GetChildren()) do
    if v:FindFirstChildWhichIsA('ClickDetector', true) and v:FindFirstChild('ID') then
        local Info = TrinketType(v)
        NewESP(v, Info)
    end
end


Workspace.ChildAdded:Connect(function(Object)
    if Object:FindFirstChildWhichIsA('ClickDetector', true) and Object:FindFirstChild('ID') then
        local Info = TrinketType(Object)
        NewESP(Object, Info)
    end
end)

RenderStepped:Connect(Update)

-- Toggle Implementation


Library.ShowToggleFrameInKeybinds = true
Library.ShowCustomCursor = true
Library.NotifySide = "Left"

local Window = Library:CreateWindow({
    Title = 'cornages successor',
    Center = true,
    AutoShow = true,
    Resizable = true,
    ShowCustomCursor = false,
    NotifySide = "Left",
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['ESP Settings'] = Window:AddTab('ESP Settings'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- ESP Tab
local Visuals = Tabs['ESP Settings']:AddLeftGroupbox('Visuals')
Visuals:AddToggle('EnableESP', {
    Text = 'Player ESP',
    Tooltip = 'Toggle ESP on or off.',
    Default = false,
    Callback = function(Value)
        ESP:Toggle(Value) -- Assuming the ESP script exposes a Toggle method
    end
})


-- Main Tab, Player GroupBox
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

-- Fly Variables
local originalGravity = workspace.Gravity
local flying = false
local flySpeed = 100 -- Default fly speed
local fallSpeed = 50 -- Default fall speed
local LocalPlayer = game.Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    Humanoid = Character:WaitForChild("Humanoid")
end)

-- Fly function to move the character
local function fly()
    while flying do
        local MoveDirection = Vector3.new()
        local cameraCFrame = workspace.CurrentCamera.CFrame

        -- Check movement inputs
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            MoveDirection += cameraCFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            MoveDirection -= cameraCFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            MoveDirection -= cameraCFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            MoveDirection += cameraCFrame.RightVector
        end

        -- Disable auto-fall if the spacebar is pressed
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            MoveDirection += Vector3.new(0, 1, 0)
            HumanoidRootPart.Velocity = MoveDirection.Unit * flySpeed
        else
            -- Apply auto-fall unless the player is holding the spacebar
            if Toggles.AutoFallToggle and Toggles.AutoFallToggle.Value then
                HumanoidRootPart.Velocity = Vector3.new(MoveDirection.X * flySpeed, -fallSpeed, MoveDirection.Z * flySpeed)
            elseif MoveDirection.Magnitude > 0 then
                -- Normal movement while flying
                HumanoidRootPart.Velocity = MoveDirection.Unit * flySpeed
            else
                -- No input
                HumanoidRootPart.Velocity = Vector3.zero
            end
        end

        RunService.RenderStepped:Wait()
    end
end

-- Fly Toggle
LeftGroupBox:AddToggle('FlyToggle', {
    Text = 'Fly',
    Tooltip = 'fly fly fly ! fly fly fly',
    Default = false,
    Callback = function(Value)
        flying = Value
        if flying then
            workspace.Gravity = 0 -- Disable gravity when flying
            coroutine.wrap(fly)() -- Start flying in a separate thread
        else
            workspace.Gravity = originalGravity -- Restore gravity
            HumanoidRootPart.Velocity = Vector3.zero -- Stop movement when not flying
        end
    end
})
LeftGroupBox:AddLabel("Keybind"):AddKeyPicker("FlyKeybind", {
    Default = "F", -- Default key
    Text = "Keybind"
})

-- Listen for Fly keybind changes
Options.FlyKeybind:OnChanged(function()
    local newKey = Options.FlyKeybind.Value
    UserInputService.InputBegan:Connect(function(input, isProcessed)
        if isProcessed then return end -- Ignore processed inputs
        if input.KeyCode == Enum.KeyCode[newKey] then
            flying = not flying -- Toggle flying state
            Toggles.FlyToggle:SetValue(flying) -- Update the toggle UI

            if flying then
                -- Enable flying
                workspace.Gravity = 0 -- Disable gravity
                coroutine.wrap(fly)() -- Start the fly coroutine
            else
                -- Disable flying
                workspace.Gravity = originalGravity -- Restore gravity
                HumanoidRootPart.Velocity = Vector3.zero -- Stop movement
                -- Reset other fly-related states if needed
            end
        end
    end)
end)
-- Fly Speed Slider
LeftGroupBox:AddSlider('FlySpeed', {
    Text = 'Fly Speed',
    Default = 100,
    Min = 25,
    Max = 300,
    Rounding = 0,
    Tooltip = 'fly high birdie',
    Callback = function(Value)
        flySpeed = Value
    end
})
LeftGroupBox:AddDivider()
-- Auto Fall Toggle
LeftGroupBox:AddToggle('AutoFallToggle', {
    Text = 'Auto Fall',
    Tooltip = 'scarlet aint got nun on me',
    Default = false,
    Callback = function(Value)
        if Value and not flying then
            RunService:BindToRenderStep("AutoFall", Enum.RenderPriority.Character.Value, function()
                if HumanoidRootPart and not flying then
                    HumanoidRootPart.Velocity = Vector3.new(HumanoidRootPart.Velocity.X, -fallSpeed, HumanoidRootPart.Velocity.Z)
                end
            end)
        else
            RunService:UnbindFromRenderStep("AutoFall")
        end
    end
})
LeftGroupBox:AddLabel("Keybind"):AddKeyPicker("AutoFallKeybind", {
    Default = "L",
    Text = "Keybind"
})
Options.AutoFallKeybind:OnChanged(function()
    local newKey = Options.AutoFallKeybind.Value
    UserInputService.InputBegan:Connect(function(input, isProcessed)
        if isProcessed then return end
        if input.KeyCode == Enum.KeyCode[newKey] then
            Toggles.AutoFallToggle:SetValue(not Toggles.AutoFallToggle.Value)
        end
    end)
end)
-- Auto Fall Speed Slider
LeftGroupBox:AddSlider('AutoFallSpeed', {
    Text = 'Auto Fall Speed',
    Default = 50,
    Min = 10,
    Max = 200,
    Rounding = 0,
    Tooltip = 'autofall',
    Callback = function(Value)
        fallSpeed = Value
    end
})
LeftGroupBox:AddDivider()
LeftGroupBox:AddToggle('NoFallToggle', {
    Text = 'No Fall',
    Tooltip = 'nofall wtf???',
    Default = false,
    Callback = function(Value)
        local LiveFolder = workspace:FindFirstChild("Live")
        if LiveFolder then
            local PlayerModel = LiveFolder:FindFirstChild(LocalPlayer.Name)
            if PlayerModel then
                if Value then
                    -- Rename "Right Leg" to "NoFall"
                    local RightLeg = PlayerModel:FindFirstChild("Right Leg")
                    if RightLeg then
                        RightLeg.Name = "NoFall"
                    end
                else
                    -- Rename "NoFall" back to "Right Leg"
                    local NoFallLeg = PlayerModel:FindFirstChild("NoFall")
                    if NoFallLeg then
                        NoFallLeg.Name = "Right Leg"
                    end
                end
            end
        end
    end
})
LeftGroupBox:AddLabel("Keybind"):AddKeyPicker("NoFallKeybind", {
    Default = "K",
    Text = "Keybind"
})
Options.NoFallKeybind:OnChanged(function()
    local newKey = Options.NoFallKeybind.Value
    UserInputService.InputBegan:Connect(function(input, isProcessed)
        if isProcessed then return end
        if input.KeyCode == Enum.KeyCode[newKey] then
            Toggles.NoFallToggle:SetValue(not Toggles.NoFallToggle.Value)
        end
    end)
end)
LeftGroupBox:AddDivider()
-- Check for players with "Observe" tool and send notifications
local Players = game:GetService("Players")

local function NotifyPlayersWithTool()
    for _, player in ipairs(Players:GetPlayers()) do
        local backpack = player:FindFirstChild("Backpack")
        if backpack and backpack:FindFirstChild("Observe") then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Tool Found",
                Text = player.Name .. " has the 'Observe' tool!",
                Duration = 5
            })
        end
    end
end
Visuals:AddToggle('Trinket ESP', {
    Text = 'Trinket ESP',
    Tooltip = 'Toggles the ESP feature on or off.',
    Default = false,
    Callback = function(Value)
        ESPEnabled = Value
        if not ESPEnabled then
            for _, v in pairs(Cache) do
                for _, part in pairs(v.ESP) do
                    part.Visible = false
                end
            end
        end
    end
})
Visuals:AddToggle('FullbrightToggle', {
    Text = 'Fullbright',
    Tooltip = 'Maximizes brightness for better visibility.',
    Default = false,
    Callback = function(Value)
        fullBright = Value
        if fullBright then
            -- Enable full brightness
            game.Lighting.Brightness = 2
            game.Lighting.GlobalShadows = false
            game.Lighting.Ambient = Color3.new(1, 1, 1)
        else
            -- Restore default lighting values (adjust as needed)
            game.Lighting.Brightness = 1
            game.Lighting.GlobalShadows = true
            game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
        end
    end
})
Visuals:AddToggle('NoFogToggle', {
    Text = 'No Fog',
    Tooltip = 'Removes fog from the game world.',
    Default = false,
    Callback = function(Value)
        noFog = Value
        if noFog then
            -- Set fog to a very high value instead of infinity
            game.Lighting.FogEnd = 100000
            game.Lighting.FogStart = 100000
        else
            -- Restore default fog values (adjust as needed)
            game.Lighting.FogEnd = 1000
            game.Lighting.FogStart = 0
        end
    end
})

LeftGroupBox:AddToggle('NoClipToggle', {
    Text = 'NoClip',
    Tooltip = 'no, clip!',
    Default = false,
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character

        if Value then
            -- Disable Freefall state
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            end

            -- Continuously set CanCollide to false
            RunService:BindToRenderStep("NoClip", Enum.RenderPriority.Character.Value, function()
                if character then
                    for _, v in pairs(character:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end
                end
            end)
        else
            -- Enable Freefall state
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
            end

            -- Stop disabling CanCollide
            RunService:UnbindFromRenderStep("NoClip")
        end
    end
})
LeftGroupBox:AddLabel("Keybind"):AddKeyPicker("NoClipKeybind", {
    Default = "N",
    Text = "Keybind"
})
Options.NoClipKeybind:OnChanged(function()
    local newKey = Options.NoClipKeybind.Value
    UserInputService.InputBegan:Connect(function(input, isProcessed)
        if isProcessed then return end
        if input.KeyCode == Enum.KeyCode[newKey] then
            Toggles.NoClipToggle:SetValue(not Toggles.NoClipToggle.Value)
        end
    end)
end)
LeftGroupBox:AddDivider()
local defaultCharName


local function updateStreamerMode(value)
    local statGui = player:WaitForChild("PlayerGui"):FindFirstChild("StatGui")
    local container = statGui and statGui:FindFirstChild("Container")
    local characterName = container and container:FindFirstChild("CharacterName")
    local characterNameShadow = characterName and characterName:FindFirstChild("Shadow")

    if not defaultCharName and characterName then
        defaultCharName = characterName.Text
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    local hidden = leaderstats and leaderstats:FindFirstChild("Hidden")

    local deadContainer = statGui and statGui:FindFirstChildOfClass("TextLabel")

    if hidden then
        hidden.Value = value
    end

    if characterName and characterNameShadow then
        characterName.Text = value and "cornage is back bitches" or defaultCharName
        characterNameShadow.Text = value and "cornage is back bitches" or defaultCharName
    end

    if deadContainer then
        deadContainer.Visible = not value
    end
end

local streamerModeEnabled = false

-- Function to toggle streamer mode
local function toggleStreamerMode()
    streamerModeEnabled = not streamerModeEnabled
    updateStreamerMode(streamerModeEnabled)
end

-- Add Streamer Mode toggle to UI
local StreamerModeToggle = LeftGroupBox:AddToggle('StreamerModeToggle', {
    Text = 'Streamer Mode',
    Tooltip = 'stream mode',
    Default = false,
    Callback = function(Value)
        toggleStreamerMode()
    end
})
-- Notify at script load
NotifyPlayersWithTool()

-- Optional: Detect new players joining and check their inventory
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Wait()
    local backpack = player:WaitForChild("Backpack", 10)
    if backpack and backpack:FindFirstChild("Observe") then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Tool Found",
            Text = player.Name .. " has the 'Observe' tool!",
            Duration = 5
        })
    end
end)

LeftGroupBox:AddToggle('AutoPickupToggle', {
    Text = 'Auto Pick Up',
    Tooltip = 'Automatically picks up trinkets when nearby.',
    Default = false,
    Callback = function(Value)
        AutoPickupEnabled = Value

        if AutoPickupEnabled then
            RunService:BindToRenderStep("AutoPickup", Enum.RenderPriority.Character.Value, AutoPickup)
        else
            RunService:UnbindFromRenderStep("AutoPickup")
        end
    end
})

-- Menu bind and unload button in UI settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuGroup:AddButton("Unload", function() Library:Unload() end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Set up theme and save manager
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:BuildConfigSection(Tabs['UI Settings'])
